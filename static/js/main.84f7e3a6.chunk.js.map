{"version":3,"sources":["App.js","index.js"],"names":["operations","App","useState","rows","i","push","Array","from","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","style","height","width","background","margin","paddingTop","textAlign","onClick","display","padding","color","fontSize","fontWeight","borderRadius","cursor","border","outline","position","gridTemplateColumns","map","col","newGrid","widths","backgroundColor","undefined","ReactDOM","render","document","getElementById"],"mappings":"0KAMMA,EAAa,CAClB,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,IAsHUC,EAnHH,WAAO,IAAD,EACOC,oBAAU,WAGjC,IAFA,IAAMC,EAAO,GAELC,EAAI,EAAGA,EAlBD,GAkBcA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAlBR,KAkBwB,kBAAM,MAG5C,OAAOH,KARS,mBACVK,EADU,KACJC,EADI,OAWaP,oBAAS,GAXtB,mBAWVQ,EAXU,KAWDC,EAXC,KAYXC,EAAaC,iBAAOH,GAE1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAa,WAC9BJ,EAAWE,UAIfL,GAAS,SAAAQ,GACR,OAAOC,YAAQD,GAAG,SAAAE,GACjB,IAD8B,IAAD,WACrBf,GACP,IAF4B,eAEpBgB,GACP,IAAIC,EAAY,EAChBrB,EAAWsB,SAAS,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACzBC,EAAOrB,EAAImB,EACXG,EAAON,EAAII,EAEdC,GAAQ,GAAKA,EA5CP,IA4CyBC,GAAQ,GAAKA,EA3CtC,KA4CRL,GAAaJ,EAAEQ,GAAMC,OAKpBL,EAAY,GAAKA,EAAY,EAC/BF,EAASf,GAAGgB,GAAK,EACK,IAAZH,EAAEb,GAAGgB,IAA0B,IAAdC,IAC3BF,EAASf,GAAGgB,GAAK,IAfXA,EAAI,EAAGA,EArCJ,GAqCiBA,IAAM,EAA1BA,IADDhB,EAAI,EAAGA,EArCH,GAqCgBA,IAAM,EAA1BA,SAuBVuB,WAAWZ,EAAe,QACxB,IAGH,OACC,sBAAKa,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAASC,WAAY,UAAWC,OAAQ,SAAUC,WAAY,OAAQC,UAAW,UAAvH,UACC,8CACA,8JACA,wBACCC,QAAU,WACTxB,GAAYD,GAERA,IACHE,EAAWE,SAAU,EACrBC,MAGFa,MAAO,CACNQ,QAAS,QACTJ,OAAQ,YACRK,QAAS,OACTP,MAAO,QACPC,WAAY,UACZO,MAAO,QACPC,SAAU,SACVC,WAAY,OACZC,aAAc,SACdC,OAAQ,UACRC,OAAQ,kBACRC,QAAS,QArBX,SAyBElC,EAAU,UAAY,cAGxB,qBAAKkB,MAAO,CAAEQ,QAAS,QAASS,SAAU,WAAYf,MAAO,QAASE,OAAQ,aAA9E,SACC,qBACCJ,MAAO,CACNQ,QAAS,OACTU,oBAAoB,UAAD,OAnGT,GAmGS,WACnBd,OAAQ,YAJV,SAOExB,EAAKuC,KAAK,SAAC5C,EAAMC,GAAP,OACVD,EAAK4C,KAAK,SAACC,EAAK5B,GAAN,OACT,qBAECe,QAAU,WACT,IAAMc,EAAU/B,YAAQV,GAAM,SAAAW,GAC7BA,EAASf,GAAGgB,GAAKZ,EAAKJ,GAAGgB,GAAK,EAAI,KAEnCX,EAAQwC,IAETrB,MAAO,CACNsB,OAAQ,GACRrB,OAAQ,GACRsB,gBAAiB3C,EAAKJ,GAAGgB,GAAK,eAAYgC,EAC1CT,OAAQ,oBAZV,UACSvC,EADT,YACcgB,kBC1GrBiC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.84f7e3a6.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\n\nconst numRows = 30;\nconst numCols = 30;\n\nconst operations = [\n\t[-1, -1],\n\t[-1, 0],\n\t[-1, 1],\n\t[0, -1],\n\t[0, 1],\n\t[1, -1],\n\t[1, 0],\n\t[1, 1]\n];\n\nconst App = () => {\n\tconst [grid, setGrid] = useState( () => {\n\t\tconst rows = [];\n\t\t\n\t\tfor(let i = 0; i < numRows; i++) {\n\t\t\trows.push(Array.from(Array(numCols), () => 0));\n\t\t}\n\n\t\treturn rows;\n\t});\n\n\tconst [running, setRunning] = useState(false);\n\tconst runningRef = useRef(running);\n\t\n\trunningRef.current = running;\n\n\tconst runSimulation = useCallback( () => {\n\t\tif(!runningRef.current) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetGrid( g => {\n\t\t\treturn produce(g, gridCopy => {\n\t\t\t\tfor(let i = 0; i < numRows; i++) {\n\t\t\t\t\tfor(let k = 0; k < numCols; k++) {\n\t\t\t\t\t\tlet neighbors = 0;\n\t\t\t\t\t\toperations.forEach( ([x, y]) => {\n\t\t\t\t\t\t\tconst newI = i + x;\n\t\t\t\t\t\t\tconst newK = k + y;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n\t\t\t\t\t\t\t\tneighbors += g[newI][newK];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\t// RULES:\n\t\t\t\t\t\tif(neighbors < 2 || neighbors > 3) {\n\t\t\t\t\t\t\tgridCopy[i][k] = 0;\n\t\t\t\t\t\t} else if (g[i][k] === 0 && neighbors === 3) {\n\t\t\t\t\t\t\tgridCopy[i][k] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\n\t\tsetTimeout(runSimulation, 150);\n\t}, []);\n\n\t\n\treturn (\n\t\t<div style={{ height: '100vh', width: '100vw', background: '#eeeeee', margin: '0 auto', paddingTop: '1rem', textAlign: 'center' }}>\n\t\t\t<h3>Game Of Life</h3>\n\t\t\t<p>Set the fields you want to make 'alive', and click start. You can also change field status by clicking during the simulation.</p>\n\t\t\t<button\n\t\t\t\tonClick={ () => {\n\t\t\t\t\tsetRunning(!running);\n\t\t\t\t\t\n\t\t\t\t\tif(!running) {\n\t\t\t\t\t\trunningRef.current = true;\n\t\t\t\t\t\trunSimulation();\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\tmargin: '2rem auto',\n\t\t\t\t\tpadding: '1rem',\n\t\t\t\t\twidth: '16rem',\n\t\t\t\t\tbackground: '#f15025',\n\t\t\t\t\tcolor: 'white',\n\t\t\t\t\tfontSize: '1.2rem',\n\t\t\t\t\tfontWeight: 'bold',\n\t\t\t\t\tborderRadius: '0.9rem',\n\t\t\t\t\tcursor: 'pointer',\n\t\t\t\t\tborder: '2px solid black',\n\t\t\t\t\toutline: 'none'\n\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{running ? \"S T O P\" : \"S T A R T\"}\n\t\t\t</button>\n\n\t\t\t<div style={{ display: 'block', position: 'relative', width: '40rem', margin: '2rem auto' }}>\n\t\t\t\t<div \n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tdisplay: \"grid\",\n\t\t\t\t\t\tgridTemplateColumns: `repeat(${numCols}, 20px)`,\n\t\t\t\t\t\tmargin: '0 1.6rem',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{grid.map( (rows, i) =>\n\t\t\t\t\t\trows.map( (col, k) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={`${i}-${k}`}\n\t\t\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\t\t\tconst newGrid = produce(grid, gridCopy => {\n\t\t\t\t\t\t\t\t\t\tgridCopy[i][k] = grid[i][k] ? 0 : 1;\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\tsetGrid(newGrid);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\twidths: 20,\n\t\t\t\t\t\t\t\t\theight: 20,\n\t\t\t\t\t\t\t\t\tbackgroundColor: grid[i][k] ? \"#f15025\" : undefined,\n\t\t\t\t\t\t\t\t\tborder: \"solid 1px black\"\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}